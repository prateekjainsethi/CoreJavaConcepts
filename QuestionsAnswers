Q1. Differentiate between Transient and Volatile Variable in Java
The keyword transient is used when one does not want the variable to be serialized.	

The keyword volatile against the name of the variable shows that whatever content is there in the variable, is stored in the main memory.
Thus, all the read of that variable must be done using the main memory and not from the CPU cache, and every write should also be done to the main memory.

Q2. public void fooMethod(String... infoArgs)  
The feature is also called varargs (which means variable arguments). It implies that the method can receive one or more than one String

Q3. Distinguish between the ArrayList and Vector in Java.
ArrayList is neither synchronized nor thread-safe.

Vector is, by default, synchronized and thread-safe. It means the internal state of the Class is not affected even if the multiple threads are operating simultaneously.

Q4. The contract hashCode-equals contract says:
If two objects are the same or equal, then the method hashCode() should always generate the same result for both objects.

Q5. System.out.println(1.0/0.0);

The values 1.0 or 0.0 are double values. The Double class has a specific set of rules, 
such as -0.0, NaN, Double.INFINITY, etc., which supports in arithmetic computations. The above print statement will print Infinity on the console without giving any arithmetic exceptions.

Q6. Immutable class
Immutable class in java means that once an object is created, we cannot change its content.
In Java, all the wrapper classes (like Integer, Boolean, Byte, Short) and String class is immutable. 

Features:
The class must be declared as final so that child classes can’t be created.
Data members in the class must be declared private so that direct access is not allowed.
A parameterized constructor should initialize all the fields performing a deep copy so that data members can’t be modified with an object reference.
No Setter Method
If using any Map then in the getter always return the deep copy object not the refrence variables

final class Immutable {

  private final String name;
  private final int id;
  private final Map<String,String> mapObj;

  // no setter 
  getName()
  return name;

  getId()
  return id;

  getMapObj() {
  Map<String, String> tempMap = new HashMap<>();
  // iterate the map and copy each value in the temp map
  return tempMap;
  } 
  

  Main() { 
  }

}
